;; Box/Option/Maybe idea adapted from:
;; https://text.marvinborner.de/2023-04-07-01.html

alias nothing nil .

def maybe fn (x just none)
  just x .

alias box maybe .
alias option maybe .

alias option maybe .

def isnothing fn (maybe)
  maybe (fn _ false) true .

alias isNothing isnothing .

def isjust = complement isnothing .

alias isJust isjust .
alias just? isjust .
alias justp isjust .

def just fn (default maybe)
  maybe identity default .

alias fromMaybe just .
alias result just .

;; Either implementation from
;; https://text.marvinborner.de/2024-11-18-00.html#either

def left fn (value lft rght) lft value .
def right fn (value lft rght) rght value .

def either fn (leftfn rightfn ethr)
  ethr leftfn rightfn .

def isleft fn (either)
  either (fn _ true) (fn _ false) .

alias isLeft isleft .
alias left? isleft .
alias leftp isleft .

def isright fn (either)
  either (fn _ false) (fn _ true) .

alias isRight isright .
alias right? isright .
alias rightp isright .

def getleft fn (either)
  either identity (constantly nil) .

alias getLeft getleft .
alias fromLeft getleft .

def getright fn (either)
  either (constantly nil) identity .

alias getRight getright .
alias fromRight getright .
;; Box/Option/Maybe idea adapted from:
;; https://text.marvinborner.de/2023-04-07-01.html

alias nothing nil .

def maybe type (x)
  fn (just none)
    just x .

alias box maybe .
alias option maybe .

def isnothing fn (mb)
  mb (fn _ false) true .

alias isNothing isnothing .

def isjust = complement isnothing .

alias isJust isjust .
alias just? isjust .
alias justp isjust .
alias state? isjust .

def just fn (default mb)
  mb identity default .

alias fromMaybe just .
alias result just .

;; Either implementation from
;; https://text.marvinborner.de/2024-11-18-00.html#either

def left type (leftval)
  fn (lft rght)
    lft leftval .
def right type (rightval)
  fn (lft rght)
    rght rightval .

def either fn (leftfn rightfn ethr)
  ethr leftfn rightfn .

def isleft fn (either)
  either (fn _ true) (fn _ false) .

alias isLeft isleft .
alias left? isleft .
alias leftp isleft .

def isright fn (either)
  either (fn _ false) (fn _ true) .

alias isRight isright .
alias right? isright .
alias rightp isright .

def leftval fn (either)
  either identity (constantly nil) .

alias getleft leftval .
alias getLeft getleft .
alias fromLeft getleft .

def rightval fn (either)
  either (constantly nil) identity .

alias getright rightval .
alias getRight getright .
alias fromRight getright .
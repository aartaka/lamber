def succ fn (n f x)
  int : f : (int n) f x .

alias 1+ succ .
alias ++ succ .
alias incf succ .
alias inc succ .
alias i++ succ .

def add fn (augend addend f x)
  int : (int augend) f : (int addend) f x .

alias + add .
alias plus add .
alias i+ add .

def mult fn (multiplicand multiplier f)
  int : (int multiplicand) : (int multiplier) f .

alias * mult .
alias × mult .
alias i* mult .

def pow fn (base expt)
  int : expt base .

alias ** pow .
alias ^ pow .
alias expt pow .
alias i^ pow .

;; Optimized to not introduce extra bindings
def pred fn n ;; (n f x)
  #.(CL:LAMBDA (n) (LAMBER::EVAL (CL:MAX 0 (CL:1- (LAMBER::TONUM n))))) n
  ;; int : n (fn (g h) h (g f)) (fn u x) (fn u u)
end

alias 1- pred .
alias -- pred .
alias decf pred .
alias dec pred .
alias i-- dec .

def sub fn (minuend subtrahend)
  ;; Yes, a Lisp optimization in the middle of standard lib.
  ;; Subtraction is likely the most inefficient function in Lambda Calculus,
  ;; adding 3xSUBTRAHEND bindings
  #.(CL:LAMBDA (minuend) (CL:LAMBDA (subtrahend) (LAMBER::EVAL (CL:MAX 0 (CL:- (LAMBER::TONUM minuend) (LAMBER::TONUM subtrahend)))))) minuend subtrahend .
  ;; int : (int subtrahend) pred (int minuend) .

alias - sub .
alias minus sub .
alias i- sub .

def iszero fn (n)
  bool : n (fn x false) true .

alias is0 iszero .
alias zerop iszero .
alias zero? iszero .
alias =0 iszero .

def leq fn (m n)
  iszero : sub m n .

alias ≤ leq .
alias <= leq .
alias i<= leq .

def eq fn (m n)
  if (leq m n)
  then (leq n m)
  else false
end

alias eq? eq .
alias = eq .
alias == eq .
alias === eq .
alias int= eq .
alias char= eq .
alias i= eq .

def lt fn (m n)
  leq (succ m) n .

alias < lt .
alias less lt .
alias lessp lt .
alias below lt .
alias i< lt .

def gt fn : m n
  (leq m n) false true .

alias > gt .
alias greater gt .
alias greaterp gt .
alias above gt .
alias i> gt .

def geq fn (m n)
  leq n m .

alias ≥ geq .
alias >= geq .
alias i>= geq .

;; Obscure one listed by John Tromp with commentary:
;; "Discovered by Bertram Felgenhauer (int-e)"
def div fn (dividend divisor)
  local F = fn (m f t)
    m T (fn (c) f : c t) id .
  int (fn (f x)
       (int dividend) T (K x) ((int dividend) (F (int divisor) f) x)) .

alias / div .
alias quot div .
alias i/ div .

def mod fn (dividend divisor)
  int : sub (int dividend) : mult (int divisor) : div dividend divisor .

alias % mod .
alias rem mod .
alias i% mod .

;; Copied from John Tromp's divides.lam
def divides fn (dividend divisor)
  if (= 1 divisor)
   then true
  else
   dividend (fn (l) l true)
   (dividend
    (fn (r)
     divisor
     (fn (m b z) z (m false) b)
     (constantly r) true)
    divisor)
   false
end

def log fn (num base)
  local %log = fn x
    when (eq x base)
    then 1
    else : succ : %log : div x base
  end
  int : %log num
end

def min fn (m n)
  int : (leq m n) m n .
  
def max fn (m n)
  int : (leq m n) n m .

def between fn (low high x)
  and (geq x low) (leq x high) .

def clamp fn (low high x)
  max low : min x high .

def iseven fn n
  bool : n not true .

alias evenp iseven .
alias even? iseven .

def isodd fn n
  bool : n not false .

alias oddp isodd .
alias odd? isodd .

def gcd fn (a b)
  local %gcd = fn (r x y)
    if (iszero y)
    then x
    else r y : mod x y
  end
  int : (Z2 %gcd) a b
end
def succ fn (n f x)
  f : n f x .

alias 1+ succ .
alias ++ succ .
alias incf succ .
alias inc succ .

def add fn (augend addend f x)
  augend f : addend f x .

alias + add .
alias plus add .

def mult fn (multiplicand multiplier f)
  multiplicand : multiplier f .

alias * mult .
alias × mult .

def pow fn (base expt)
  expt base .

alias ** pow .
alias ^ pow .
alias expt pow .

def pred fn (n f x)
  n (fn (g h) h (g f))
    (fn u x)
    (fn u u)
end

alias 1- pred .
alias -- pred .
alias decf pred .
alias dec pred .

def sub fn (minuend subtrahend)
  subtrahend pred minuend .

alias - sub .
alias minus sub .

def iszero fn (n)
  n (fn x false) true .

alias is0 iszero .
alias zerop iszero .
alias zero? iszero .
alias =0 iszero .

def leq fn (m n)
  iszero : sub m n .

alias ≤ leq .
alias <= leq .

def eq fn (m n)
  if (leq m n)
  then (leq n m)
  else false
end

alias = eq .
alias == eq .
alias === eq .
alias int= eq .
alias char= eq .

def lt fn (m n)
  leq (succ m) n .

alias < lt .
alias less lt .
alias lessp lt .
alias below lt .

def gt fn : m n
  (leq m n) false true .

alias > gt .
alias greater gt .
alias greaterp gt .
alias above gt .

def geq fn (m n)
  leq n m .

alias ≥ geq .
alias >= geq .

;; Obscure one listed by John Tromp with commentary:
;; "Discovered by Bertram Felgenhauer (int-e)"
def div fn (n m)
  local F = fn (m f t)
    m T' (fn (c) f : c t) id .
  fn (f x)
    n T' (K x) (n (F m f) x) .

alias / div .
alias quot div .

def mod fn (dividend divisor)
  sub dividend : mult divisor : div dividend divisor .

alias % mod .
alias rem mod .

;; Copied from John Tromp's divides.lam
def divides fn (dividend divisor)
  if (= 1 divisor)
   then true
  else
   dividend (fn (l) l true)
   (dividend
    (fn (r)
     divisor
     (fn (m b z) z (m false) b)
     (constantly r) true)
    divisor)
   false
end

def log fn (num base)
  local %log = fn x
    when (eq x base)
    then 1
    else : succ : %log : div x base
  end
  %log num
end

def min fn (m n)
  (leq m n) m n .
  
def max fn (m n)
  (leq m n) n m .

def between fn (low high x)
  and (geq x low) (leq x high) .

def clamp fn (low high x)
  max low : min x high .

def iseven fn n
  n not true .

alias evenp iseven .
alias even? iseven .

def isodd fn n
  n not false .

alias oddp isodd .
alias odd? isodd .

def gcd fn (a b)
  local %gcd = fn (r x y)
    if (iszero y)
    then x
    else r y : mod x y
  end
  (Z2 %gcd) a b .
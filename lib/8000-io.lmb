def writec fn (c)
  #.(LAMBDA (x) (LAMBER::EVAL (PROGN (PRINC (LAMBER::TOCHAR x)) x))) c .

alias putChar writec .

;; Leaking abstraction: map doesn't work without these reverses!
def writes fn (str)
  reverse : reverse : map writec str .

alias putStr writes .

def writesln fn (str)
  writes : rcons '\n' str  .

alias putStrLn writesln .

def writef fn (name str)
  #.(LAMBDA (NAME)
     (LAMBDA (STR)
      (LAMBER::EVAL
       (UIOP:WITH-OUTPUT-FILE (F (LAMBER::TOSTRING NAME)
                              #.(INTERN "IF-EXISTS" "KEYWORD") (INTERN "SUPERSEDE" "KEYWORD"))
        (WRITE-STRING (LAMBER::TOSTRING STR) F))))) name str .

def writeFile writef .

def readc fn (dummy)
  #.(LAMBDA (_) (DECLARE (IGNORE _)) (LAMBER::EVAL (READ-CHAR))) dummy

alias getChar readc .

def readln fn (dummy)
  local char = readc dummy .
  if (char= '\n' char)
   then nil
  else cons char : readln dummy .

alias getLine readln .

def readf fn (name)
  #.(LAMBDA (x) (LAMBER::EVAL (UIOP:READ-FILE-STRING (LAMBER::TOSTRING x)))) name .

alias readFile readf .
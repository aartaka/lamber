def stoi fn (string)
  local %stoi = fn (r acc str)
    local val = + (- (first str) '0') (* acc 10)
    if (= 1 (length str))
    then val
    else r val : rest str
  end
  (Z2 %stoi) 0 string
end

alias parseInt stoi .

def stor fn (string)
  (splitwhen (char= '/') string)
  ;; Beautiful or cursed? You tell me!
  (fn (h t)
   ratio : stoi h
         : stoi : cdr : t)
end

def rtoi fn (ratio)
  div (numer ratio) (denom ratio) .

alias rfloor rtoi .

def itor fn (int)
  ratio int 1 .

;; To string
def itos fn (i)
  local tochar = (+ '0')
  if (< i 10)
  then singleton : tochar i
  else rcons (tochar : mod i 10) (itos : div i 10)
end

def rtos fn (r)
  intercalate "/" [(itos : numer r) (itos : denom r)] .

def btos fn (b)
  if b then "true" else "false" .

def ltos fn (inner list)
  rcons ']' : cons '[' : intercalate ", " : map inner list .
def foldr fn (f init list)
  local %foldr = fn (h t z)
    f h : t %foldr z
  end
  list %foldr init
end

def map fn (f list)
  local %map = fn (h t i)
    cons (f h) (t %map i)
  end
  list %map nil
end

def concat fn (a b)
  foldr cons b a .

def rcons fn (last list)
  concat list : cons last nil .

def concatmap fn (f list)
  foldr concat nil : map f list .

alias concatMap concatmap .

def length fn list
  foldr (fn (e a) succ a) 0 list .

def filter fn (pred list)
  local %filter = fn (e a)
    if (pred e)
    then (cons e a)
    else a
  end
  foldr %filter nil pred
end

def remove fn (pred list)
  filter (complement pred) list .

def reverse fn list
  local %reverse = fn (h t i)
    t %reverse : cons h i
  end
  list %reverse nil
end

def some fn (pred list)
  foldr or false : map pred list .

def all fn (pred list)
  foldr and true : map pred list .

def none fn (pred list)
  not : some pred list .

def notevery fn (pred list)
  not : all pred list .

def find fn (pred list)
  local %find = fn (e a)
    if (pred e)
    then e
    else a
  end
  foldr %find nil list
end

def unfoldr fn (step init term)
  local %unfoldr = fn (x)
    if (term x)
    then nil
    else cons x : %unfoldr : step x
  end
  %unfoldr init
end

def iota fn n
  unfoldr succ 0 : eq n .

def mapiota fn (f n)
  map f : iota n .

def replicate fn (n elem)
  mapiota (fn x elem) n .

def range fn (start end)
  mapiota (add start) (sub end start) .

def last fn (list)
  local %last = fn l
    if (null (cdr l))
    then car l
    else %last : cdr l
  end
  %last list
end

def butlast fn (list)
  local %butlast = fn l
    if (null (cdr l))
    then nil
    else cons (car l) : %butlast : cdr l
  end
  %butlast list
end

def rotatel fn (list)
    rcons (car list) (cdr list) .

def rotater fn (list)
    cons (last list) (butlast list) .

def take fn (n list)
  local %take = fn l
    if (eq n (length l))
    then l
    else %take : butlast l
  end
  %take list
end

def drop nthcdr

def takewhile fn (pred list)
  local %takewhile = fn l
    if (pred (car l))
    then cons (car l) : %takewhile : cdr l
    else nil
  end
  %takewhile list
end

alias takeWhile takewhile .

def dropwhile fn (pred list)
  local %dropwhile = fn l
    if (pred (car l))
    then %dropwhile : cdr l
    else l
  end
  %dropwhile list
end

alias dropWhile dropwhile .

def split fn (n list)
  cons (take n list) (drop n list) .

def splitwhen fn (pred list)
  local prefix = takewhile (complement pred) list .
  local suffix = dropwhile (complement pred) list .
  cons prefix suffix
end

def unzip fn (list)
  cons (map car list) (map cdr list) .

def zip fn (a b)
  local %zip = fn (h t b)
    cons (cons h : car b)
         (t %zip : cdr b)
  end
  a %zip b
end

def ipairs fn (list)
  zip (iota : length list) list .

def juxt fn (f g x)
  cons (f x) (g x) .

def equal fn (pred a b)
  local %equal = fn e
    e (fn (h t i) pred h t)
      false
  end
  all %equal : zip a b
end

def insert fn (x cmp list)
  list
  (Z (fn (r h t x)
       if (cmp h : car x)
       then (cons h (t r x))
       else (cons (car x) (cons h t))))
  (cons x nil)
end

def sort fn (cmp list)
  foldr (fn (e a) insert e cmp a) nil list
end

def apply fn (f list)
  if (null list)
  then f
  else apply (f : car list) (cdr list)
end

def intersperce fn (elem list)
  butlast : foldr (fn (e a) [e elem | a]) nil list .

alias interpose intersperce .

def intercalate fn (list lists)
  foldr concat nil : intersperce list lists .

alias join intercalate .

def index fn (pred list)
  local %index = fn (h t idx)
    if (pred h)
    then idx
    else t %index : succ idx
  end
  ;; FIXME: Is there a better default value?
  ;; MAXINT something?
  list %index 0
end